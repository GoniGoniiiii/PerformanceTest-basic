클라이언트 요청  → 서버의 부하가 빠르게 증가 →
사용자들이 발생시키는 많은 트래픽을 감당하기 위해 얼마나 서버가 많아져야 하나? →
(무턱대고 서버를 증가시키면 불필요한 서버가 생김)
성능 테스트 툴로 생성
필요한 서버 숫자만 이야기 하는것은 아님


필요한 상황 ?
    - 비효율적으로 동작하는 애플리케이션 로직 개선 - > GC등
    - 데이터베이스 같은 저장소에 대한 성능 개선 - > 인덱스, 데드락 등
    - 시스템 설계 개선 - > 비동기적인 구조 ,Circuit Breaker 등

트래픽 ?  네트워크를 통해 흐르는 데이터
성능테스트, 부하테스트, 스트레스 테스트


성능 테스트를 시작하기 전에 꼭 알아야할 배경지식

지연시간(Latency) 과 처리량 (Throughput)

- 지연시간 : 요청 한 건 한 건에 대한 처리시간
                 클라이언트가 요청을 보낸 후 응답을 받기까지 걸린 시간 주로 ms,s단위

- 처리량 : 단위 시간동안 몇 건의 요청을 처리할 수 있는가?
              주로 tps단위 (tps : Transaction Per Second)
              우리가 보내는 전송량


트랜잭션 : http 요청에 대한 응답 (한 건의 요청)
- 대역폭(BandWidth) : 네트워크가 단위시간동안 전송할 수 있는 최대한의 처리량
해당 네트워크를 최대한으로 활용했을때 얼마나 빠른속도로 많은 데이터를 보낼 수 있는지
(네트워크에서만 해당, 백엔드에서는 굳이 유의미한 단어 아닌듯)

성능을 측정할 때는 지연시간,처리량을 모두 측정해야함
ex)초당 3000개의 요청(처리량)이 들어올 때 99% 의 요청이 100ms 미만(지연시간)으로 처리되어야함

지연시간과 처리량을 동시에 목표로 삼아야 하는 이유
: 요청을 초당 1개만 처리하면 지연시간이 아주 낮게 나올것
처리량을 늘리면 지연시간도 함께 늘어날 가능성이 높음.

운영체제 : 서버의 물리적인 자원을 관리하며 프로세스라는 단위로 애플리케이션을 실행시킴

CPU : 계산작업, 이미지.영상 인코딩
        ex) 암호화,해시화
메모리: CPU를 많이 쓰는 경우 함께 많이 쓰는 경우가 많음
        ex) 인트턴스 대량 생성, 캐싱,컬렉션 객체 등
디스크 : 파일 입출력, 로그 대량 발생시
        ex) (데이터베이스에서)데이터 대량 입출력

처치량 증가 -> 서버자원 사용량 증가 -> 프로세스, 스레드 간 자원사용을 위한 대기시간 길어짐
-> 지연시간이 길어짐 -> 처리되지 못한 요청 쌓임 -> 요청 중 일부 실패

클라이언트가 요청에 대한 응답을 받을때까지
클라이언트  -> 서버 내부 자원(cpu,메모리 디스크) , db 호출  / 또다른 api 호출 -> 서버 내부자원을 거쳐 클라이언트로

웹 브라우저에서 개발자도구를 열어 네트워크탭을 열어 실제 웹페이지들이 로딩되는 시간을 확인 할 수 있음
네트워크는 물리적 제약을 많이 받는 편

네트워크 대역폭과 지연시간의 관계
ex) 대용량의 파일을 다운로드 하고 있을 때 웹서핑을 했더니 웹페이지가 느리게 뜸
고해상도의 이미지(용량이 큰)가 많이 포함된 페이지에 접속했을때 이미지들이 느리게 로딩됨

 대역폭은 가장 대역폭이 낮은 회선에 맞춰짐.

데이터베이스 일종의 애플리케이션이다.
    - cpu : 사용자가 원하는 데이터인지 ep
    - 메모리 : 데이터를 cpu가 연산할 수 있게 준비, 호긍 빠르게 처리하기 위해 캐시
    - 디스크 : 데이터들이 저장되어있음.

지연시간이 길어지는 상황
    - 많은 요청이 들어올 때
    - 한1 번에 많은 데이터를 응답으로 줘야 할 때
    - 락이 너무 자주 걸리는 경우
        트랜잭션을 지원하기 우해 데이터에 락이 걸림
        락이 걸리는만큼 대기시간(지연시간)이 발생함
        때로는 데드락이 발생하여 응답이 처리되지 않기도 함


HDD? SSD?
    - cpu : 매우매우매우 빠름
    - 메모리 : cpu 보다는 느리지만 디스크보다는 훨씬 빠름
    - 디스크 : cpu,메모리 보다 훨씬 느림